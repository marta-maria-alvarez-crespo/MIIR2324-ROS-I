// Generated by gencpp from file myturtle3/StateMessage.msg
// DO NOT EDIT!


#ifndef MYTURTLE3_MESSAGE_STATEMESSAGE_H
#define MYTURTLE3_MESSAGE_STATEMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace myturtle3
{
template <class ContainerAllocator>
struct StateMessage_
{
  typedef StateMessage_<ContainerAllocator> Type;

  StateMessage_()
    : id()
    , state(false)  {
    }
  StateMessage_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , state(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef uint8_t _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::myturtle3::StateMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::myturtle3::StateMessage_<ContainerAllocator> const> ConstPtr;

}; // struct StateMessage_

typedef ::myturtle3::StateMessage_<std::allocator<void> > StateMessage;

typedef boost::shared_ptr< ::myturtle3::StateMessage > StateMessagePtr;
typedef boost::shared_ptr< ::myturtle3::StateMessage const> StateMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::myturtle3::StateMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::myturtle3::StateMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::myturtle3::StateMessage_<ContainerAllocator1> & lhs, const ::myturtle3::StateMessage_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::myturtle3::StateMessage_<ContainerAllocator1> & lhs, const ::myturtle3::StateMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace myturtle3

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::myturtle3::StateMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::myturtle3::StateMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::myturtle3::StateMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::myturtle3::StateMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::myturtle3::StateMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::myturtle3::StateMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::myturtle3::StateMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecda1d8727c3e57fb83dd5fb8a4c64b6";
  }

  static const char* value(const ::myturtle3::StateMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecda1d8727c3e57fULL;
  static const uint64_t static_value2 = 0xb83dd5fb8a4c64b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::myturtle3::StateMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "myturtle3/StateMessage";
  }

  static const char* value(const ::myturtle3::StateMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::myturtle3::StateMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"bool state\n"
;
  }

  static const char* value(const ::myturtle3::StateMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::myturtle3::StateMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StateMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::myturtle3::StateMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::myturtle3::StateMessage_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MYTURTLE3_MESSAGE_STATEMESSAGE_H
