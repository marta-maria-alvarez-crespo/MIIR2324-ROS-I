#!/usr/bin/env python

import rospy
from myturtle3.msg import StateMessage
from myturtle3 import turn

VARIABLE = False


def subscriber_callback(data):
    """
    Callback function for the subscriber.

    Args:
        data: The sensor message received.

    Returns:
        None
    """
    rospy.loginfo(f"New sensor message received: {data.id}, {data.state}.")
    if data.id == "find_wall":
        global VARIABLE
        VARIABLE = data.state


def inicia_nodo():
    """
    Initializes the 'turn_node' ROS node and starts the turn.TurnTurtle object.

    This function initializes the ROS node with the name 'turn_node' and subscribes to the 'state' topic
    using the StateMessage message type. It then enters a loop where it waits for the global VARIABLE
    to become True. Once VARIABLE is True, it sets VARIABLE to False and starts the turn.TurnTurtle object.

    Raises:
        rospy.ROSInterruptException: If there is an error initializing the ROS node.

    """
    try:
        rospy.init_node("turn_node")
        reach_wall = turn.TurnTurtle()
        rospy.Subscriber("state", StateMessage, subscriber_callback)

        global VARIABLE
        while True:
            while not VARIABLE:
                None
            
            VARIABLE = False
            reach_wall.start()

    except rospy.ROSInterruptException:
        rospy.logerr("Error inicializando el nodo")


if __name__ == "__main__":
    inicia_nodo()
