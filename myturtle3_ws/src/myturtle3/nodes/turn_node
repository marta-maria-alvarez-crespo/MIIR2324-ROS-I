#!/usr/bin/env python

# Autora: Marta María Álvarez Crespo
# Descripción: Nodo de ROS que inicia el proceso TurnTurtle.
# Última modificación: 07 / 04 / 2024

import rospy
from myturtle3.msg import StateMessage
from myturtle3 import turn

VARIABLE = False


def subscriber_callback(data):
    """
    Callback function for the subscriber.

    Args:
        data: The sensor message received.

    Returns:
        None
    """
    rospy.loginfo(f"New sensor message received: {data.id}, {data.state}.")
    if data.id == "turn_wall":
        global VARIABLE
        VARIABLE = data.state


def inicia_nodo():
    """
    Inicializa el 'turn_node' (nodo de ROS) e inicia el objeto turn.TurnTurtle().

    Esta función inicializa el nodo de ROS con el nombre 'turn_node' y se suscribe al topic 'state'
    usando el tipo de mensaje StateMessage. Luego entra en un bucle donde espera a que la VARIABLE global
    se convierta en True. Una vez que VARIABLE es True, establece VARIABLE en False e inicia el comportamiento de giro.

    Raises:
        rospy.ROSInterruptException: Si hay un error inicializando el nodo.

    """
    try:
        rospy.init_node("turn_node")
        reach_wall = turn.TurnTurtle()
        rospy.Subscriber("state", StateMessage, subscriber_callback)

        global VARIABLE
        while True:
            while not VARIABLE:
                None

            VARIABLE = False
            reach_wall.start()

    except rospy.ROSInterruptException:
        rospy.logerr("Error inicializando el nodo")


if __name__ == "__main__":
    inicia_nodo()
